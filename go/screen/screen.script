local INPUT = require "libs.input"
local WORLD = require "libs.world"
local SCREEN = require "libs.screen"
local CONST = require "libs.constants"
local RAYS = require "libs.rays"
local LUME = require "libs.lume"
local MAP = WORLD.map

local MATH_CEIL = math.ceil

local function add_sprites()
	local sprites = {
		{18, 18, 13},--green light in front of playerstart
		--green lights in every room
		--[[ --]]
		{18.5,4.5, 13},
		{10.0,4.5, 13},
		{10.0,12.5,13},
		{3.5, 6.5, 13},
		{3.5, 20.5,13},
		{3.5, 14.5,13},
		{14.5,20.5,13},

		--row of pillars in front of wall: fisheye test
		{18.5, 10.5, 12},
		{18.5, 11.5, 12},
		{18.5, 12.5, 12},

		--some barrels around the map
		{21.5, 1.5, 11},
		{15.5, 1.5, 11},
		{16.0, 1.8, 11},
		{16.2, 1.2, 11},
		{3.5,  2.5, 11},
		{9.5, 15.5, 11},
		{10.0, 15.1,11},
		{10.5, 15.8,11},--]]
	}
	for _,sprite in ipairs(sprites) do
		native_raycasting.add_sprite(sprite[1], sprite[2], sprite[3])
	end	
end	

function init(self)
	self.resource_path = go.get("#model", "texture0")
	self.native_table = {width = SCREEN.WIDTH, height = SCREEN.HEIGHT, leds = SCREEN.NODES}
	go.set_position(vmath.vector3(SCREEN.WIDTH/2, SCREEN.HEIGHT/2, 0))
	local scale = vmath.vector3(50 * SCREEN.WIDTH, 50 * SCREEN.HEIGHT, 1)
	go.set_scale(scale)
	local camera = WORLD.player.camera
	native_raycasting.set_map(WORLD.map)
	add_sprites()
end


local count, total = 0, 0
local function test()
	local camera = WORLD.player.camera
	local time = os.clock()
	for i=1, 1000 do
		native_raycasting.update_camera(camera.position.x, camera.position.y, camera.angle)
		native_raycasting.cast_rays()
	end
	time = os.clock() - time
	count = count + 1
	total = total + time
	
	print("time:" .. time)
	print("avg:" .. total/count .. " coint:" .. count)
end	

function update(self, dt)
	native_raycasting.clear_buffer()
	local camera = WORLD.player.camera
	WORLD.update_camera()
	--test()
	--WORLD.player.position.x = LUME.clamp(WORLD.player.position.x, 1.5, 23)
	--WORLD.player.position.y = LUME.clamp(WORLD.player.position.y, 1.5, 23)
	--	WORLD.update_camera()
	local time = os.clock()
	native_raycasting.update_camera(camera.position.x, camera.position.y, camera.angle)
	native_raycasting.cast_rays()
	local header = {width = SCREEN.WIDTH, height = SCREEN.HEIGHT, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGB, num_mip_maps = 0}
	resource.set_texture(self.resource_path, header, SCREEN.BUFFER)
	--print("time:" .. os.clock() - time)
end


