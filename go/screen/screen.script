local INPUT = require "libs.input"
local WORLD = require "libs.world"
local SCREEN = require "libs.screen"
local CONST = require "libs.constants"
local RAYS = require "libs.rays"
local LUME = require "libs.lume"
local WALLS = require "assets.walls.walls"

local HALF_SCREEN_HEIGHT = math.floor(SCREEN.HEIGHT / 2)

function init(self)
	self.resource_path = go.get("#model", "texture0")
	self.native_table = {width = SCREEN.WIDTH, height = SCREEN.HEIGHT, leds = SCREEN.NODES}
	go.set_position(vmath.vector3(SCREEN.WIDTH/2, SCREEN.HEIGHT/2, 0))
	local scale = vmath.vector3(50 * SCREEN.WIDTH, 50 * SCREEN.HEIGHT, 1)
	go.set_scale(scale)
end

local function get_color(cell)
	return WALLS[cell][1]
end	

local function ver_line(ray_id, draw_start, draw_end, wall, texture_x)
	local start_pixel = math.ceil(wall.width * texture_x)
	
	local y_width = (draw_end - draw_start)
	for x = 1, CONST.STRIP_SIZE do
		for y = draw_start, draw_end do
			local y_pixel = math.ceil((y - draw_start) / y_width * 63) +1
			local x_pixel = LUME.clamp(start_pixel + x, 0, 64)
			local color = wall[(y_pixel-1) * wall.width + x_pixel]
			SCREEN.set_node(x + (ray_id - 1) * CONST.STRIP_SIZE, y, color)
		end
	end	
end	

local function on_ray_intersept(self, dist, x, y, cell, ray, hit_x, perp_dist, texture_x)
	local line_height = SCREEN.HEIGHT / perp_dist
	local half_line_height = LUME.round(line_height / 2)
	local draw_start = - half_line_height + HALF_SCREEN_HEIGHT
	local draw_end =  half_line_height + HALF_SCREEN_HEIGHT
	if draw_start < 0 then draw_start = 0 end
	if draw_end >= SCREEN.HEIGHT then draw_end = SCREEN.HEIGHT - 1 end
	local color = get_color(cell)
	if hit_x then color = color/2 end
	ver_line(ray, draw_start, draw_end,  WALLS[cell], texture_x)
end	

function update(self, dt)
	--print("***************")
	local time = os.clock()
	SCREEN.clear()
	RAYS.cast_rays(WORLD.player, WORLD.map.MAP, on_ray_intersept, self)
	SCREEN.draw()
	--print("time:" .. os.clock() - time)
	local header = {width = SCREEN.WIDTH, height = SCREEN.HEIGHT, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGB, num_mip_maps = 0}
	resource.set_texture(self.resource_path, header, SCREEN.BUFFER)
end


